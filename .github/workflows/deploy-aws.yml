name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: nestora-chocolates-prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run build
      run: npm run build
    
    - name: Get AWS account ID
      id: aws-account
      run: |
        echo "account-id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nestora-chocolates
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Update Kubernetes manifests
      run: |
        # Update deployment image
        sed -i "s|ACCOUNT_ID|${{ steps.aws-account.outputs.account-id }}|g" clusters/aws-production/apps/nestora-chocolates/deployment.yaml
        sed -i "s|:latest|:${{ env.IMAGE_TAG }}|g" clusters/aws-production/apps/nestora-chocolates/deployment.yaml
        
        # Update kustomization
        sed -i "s|ACCOUNT_ID|${{ steps.aws-account.outputs.account-id }}|g" clusters/aws-production/apps/nestora-chocolates/kustomization.yaml
        sed -i "s|newTag: latest|newTag: ${{ env.IMAGE_TAG }}|g" clusters/aws-production/apps/nestora-chocolates/kustomization.yaml
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add clusters/aws-production/apps/nestora-chocolates/
        git commit -m "Update AWS deployment image to ${{ env.IMAGE_TAG }}" || exit 0
        git push
    
    - name: Setup kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
    
    - name: Verify deployment
      run: |
        # Wait for rollout to complete
        kubectl rollout status deployment/nestora-chocolates -n nestora-chocolates --timeout=300s
        
        # Check pod status
        kubectl get pods -n nestora-chocolates -l app=nestora-chocolates
        
        # Check service status
        kubectl get service -n nestora-chocolates
        
        # Check ingress status
        kubectl get ingress -n nestora-chocolates
    
    - name: Run health check
      run: |
        # Get the load balancer URL
        INGRESS_URL=$(kubectl get ingress nestora-chocolates-ingress -n nestora-chocolates -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        if [ ! -z "$INGRESS_URL" ]; then
          echo "Testing health endpoint: https://$INGRESS_URL/health"
          # Wait for DNS propagation
          sleep 30
          curl -f https://$INGRESS_URL/health || echo "Health check failed, but deployment may still be successful"
        else
          echo "Ingress URL not yet available"
        fi
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê Application URL: https://nestorainc.com"
          echo "üìä Grafana: https://grafana.nestorainc.com"
        else
          echo "‚ùå Deployment failed!"
        fi